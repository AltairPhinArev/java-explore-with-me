{
	"info": {
		"_postman_id": "e02203d1-2ce0-41d4-98cc-52b5918f0727",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27165155"
	},
	"item": [
		{
			"name": "comments",
			"item": [
				{
					"name": "Create-Commen id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Должно вернуться тело объкта\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('user');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"This event might be more better\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments?",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"query": [
								{
									"key": "",
									"value": null
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create another comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Должно вернуться тело объкта\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('user');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"another comments about this event\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail to update comment with empty text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail update comment by other user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"I can to change comment without owner))\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Comment by Admin with text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Коммент должна содержать поля: id, description,createdOn, user, event\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('description');\r",
									"pm.expect(target[0]).to.have.property('createdOn');\r",
									"pm.expect(target[0]).to.have.property('user');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны быть массивом длиной больше 0\", function () {\r",
									"    pm.expect(target.length).to.be.above(0); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?text=be&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "be"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Event by id with commonets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Должно вернуться тело объекта\", function () {\r",
									"    var responseBody = pm.response.json(); // Получение объекта JSON из ответа\r",
									"\r",
									"    pm.expect(responseBody).to.have.property('id');\r",
									"    pm.expect(responseBody).to.have.property('title');\r",
									"    pm.expect(responseBody).to.have.property('annotation');\r",
									"    pm.expect(responseBody).to.have.property('category');\r",
									"    pm.expect(responseBody).to.have.property('paid');\r",
									"    pm.expect(responseBody).to.have.property('eventDate');\r",
									"    pm.expect(responseBody).to.have.property('initiator');\r",
									"    pm.expect(responseBody).to.have.property('views');\r",
									"    pm.expect(responseBody).to.have.property('confirmedRequests');\r",
									"    pm.expect(responseBody).to.have.property('description');\r",
									"    pm.expect(responseBody).to.have.property('createdOn');\r",
									"    pm.expect(responseBody).to.have.property('publishedOn');\r",
									"    pm.expect(responseBody).to.have.property('location');\r",
									"    pm.expect(responseBody).to.have.property('requestModeration');\r",
									"    pm.expect(responseBody).to.have.property('comments');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comment by text from user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Коммент должна содержать поля: id, description,createdOn, user, event\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('description');\r",
									"pm.expect(target[0]).to.have.property('createdOn');\r",
									"pm.expect(target[0]).to.have.property('user');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны быть массивом длиной больше 0\", function () {\r",
									"    pm.expect(target.length).to.be.above(0); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/comments?text=this&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "this"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment by Time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Коммент должна содержать поля: id, description,createdOn, user, event\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('description');\r",
									"pm.expect(target[0]).to.have.property('createdOn');\r",
									"pm.expect(target[0]).to.have.property('user');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны быть массивом длиной больше 0\", function () {\r",
									"    pm.expect(target.length).to.be.above(1); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments?StartDate=2020-05-05 00:00:00&EndDate=2029-05-05 00:00:00&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"query": [
								{
									"key": "StartDate",
									"value": "2020-05-05 00:00:00"
								},
								{
									"key": "EndDate",
									"value": "2029-05-05 00:00:00"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get empty by comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"let founded;\r",
									"target.forEach(function(element){if (element.id == source.id) founded = element});\r",
									"\r",
									"\r",
									"pm.test(\"Данные в ответе должны быть массивом длиной равна 0\", function () {\r",
									"    pm.expect(target.length).to.be.above(-1); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/comments?text=another&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "another"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete fail comment from user by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment from user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch offensive comment from Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Должно вернуться тело объкта\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('user');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.be.property('description');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"});\r",
									"\r",
									"const targetDescription = {\r",
									"  description: 'Значение, которое пришло'\r",
									"};\r",
									"\r",
									"pm.test(\"Поле description должно иметь значение\", function () {\r",
									"    pm.expect(targetDescription).to.have.property('description');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commentId?permissible=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"query": [
								{
									"key": "permissible",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comments from Admin by Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Коммент должна содержать поля: id, description,createdOn, user, event\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('description');\r",
									"pm.expect(target[0]).to.have.property('createdOn');\r",
									"pm.expect(target[0]).to.have.property('user');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны быть массивом длиной больше 0\", function () {\r",
									"    pm.expect(target.length).to.be.above(0); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:eventId?from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":eventId"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment By Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}